package sep.gaia.resources.caching;

import sep.gaia.resources.DataResource;

import java.io.Serializable;

/**
 * An entry of an {@link sep.gaia.resources.caching.AbstractCache}s index holding
 * additional meta-data, that can be used by {@link sep.gaia.resources.caching.CacheRemovalStrategy}s
 * to decide wether to keep or purge a cached resource.
 */
public class CacheEntry<R extends DataResource> implements Serializable {

    /**
     * The resource cached.
     */
    private R resource;

    /**
     * Value describing how often the resource was queried.
     */
    private int usageCount;

    /**
     * The time when the resource was inserted in cache.
     * This is a Lamport timestamp generated by the cache.
     */
    private long insertionTime;

    /**
     * The time when the element was last queried.
     * This is a Lamport timestamp generated by the cache.
     */
    private long lastUsageTime;

    /**
     * Initializes the entry with its held resource and its insertion time.
     * @param resource The resource to be held by this entry.
     * @param insertionTime The Lamport time of the cache when this element was inserted.
     */
    public CacheEntry(R resource, long insertionTime) {
        this.resource = resource;
        this.insertionTime = insertionTime;
    }

    /**
     * @return The resource cached.
     */
    public R getResource() {
        return resource;
    }

    /**
     * @param resource The resource cached.
     */
    public void setResource(R resource) {
        this.resource = resource;
    }

    public int getUsageCount() {
        return usageCount;
    }

    public void setUsageCount(int usageCount) {
        this.usageCount = usageCount;
    }

    public long getLastUsageTime() {
        return lastUsageTime;
    }

    public void setLastUsageTime(long lastUsageTime) {
        this.lastUsageTime = lastUsageTime;
    }

    public long getInsertionTime() {
        return insertionTime;
    }
}
